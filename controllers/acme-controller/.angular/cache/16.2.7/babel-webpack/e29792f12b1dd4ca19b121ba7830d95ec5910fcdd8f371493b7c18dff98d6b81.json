{"ast":null,"code":"import { filter, map } from 'rxjs';\nimport { ConnectionStatus } from 'src/app/enums/connection-status';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/agent.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../connection-card/connection-card.component\";\nimport * as i4 from \"../../../shared/empty-list/empty-list.component\";\nfunction ConnectionListComponent_app_connection_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-connection-card\", 3);\n    i0.ɵɵlistener(\"remove\", function ConnectionListComponent_app_connection_card_1_Template_app_connection_card_remove_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onRemoveConnection($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const connection_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"connection\", connection_r2);\n  }\n}\nfunction ConnectionListComponent_app_empty_list_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-empty-list\");\n  }\n}\nexport class ConnectionListComponent {\n  constructor(agentService) {\n    this.agentService = agentService;\n    this.connections = [];\n  }\n  ngOnInit() {\n    this.agentService.getConnections().pipe(map(connections => {\n      connections.filter(connection => connection.state === ConnectionStatus.ACTIVE || connection.state === ConnectionStatus.REQUESTED);\n    })).subscribe();\n  }\n  onRemoveConnection(connection) {\n    this.agentService.removeConnection(connection.connection_id).pipe(filter(connectionId => !!connectionId), map(connectionId => this.connections = this.connections.filter(conn => conn.connection_id !== connectionId))).subscribe();\n  }\n  static #_ = this.ɵfac = function ConnectionListComponent_Factory(t) {\n    return new (t || ConnectionListComponent)(i0.ɵɵdirectiveInject(i1.AgentService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ConnectionListComponent,\n    selectors: [[\"app-connection-list\"]],\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"card-columns\"], [3, \"connection\", \"remove\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [3, \"connection\", \"remove\"]],\n    template: function ConnectionListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ConnectionListComponent_app_connection_card_1_Template, 1, 1, \"app-connection-card\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, ConnectionListComponent_app_empty_list_2_Template, 1, 0, \"app-empty-list\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.connections);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !(ctx.connections == null ? null : ctx.connections.length));\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.ConnectionCardComponent, i4.EmptyListComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["filter","map","ConnectionStatus","i0","ɵɵelementStart","ɵɵlistener","ConnectionListComponent_app_connection_card_1_Template_app_connection_card_remove_0_listener","$event","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","onRemoveConnection","ɵɵelementEnd","ɵɵproperty","connection_r2","ɵɵelement","ConnectionListComponent","constructor","agentService","connections","ngOnInit","getConnections","pipe","connection","state","ACTIVE","REQUESTED","subscribe","removeConnection","connection_id","connectionId","conn","_","ɵɵdirectiveInject","i1","AgentService","_2","selectors","decls","vars","consts","template","ConnectionListComponent_Template","rf","ctx","ɵɵtemplate","ConnectionListComponent_app_connection_card_1_Template","ConnectionListComponent_app_empty_list_2_Template","ɵɵadvance","length"],"sources":["/home/andy/University/masters-thesis/ddos-data-mesh-network/controllers/acme-controller/src/app/components/connections/connection-list/connection-list.component.ts","/home/andy/University/masters-thesis/ddos-data-mesh-network/controllers/acme-controller/src/app/components/connections/connection-list/connection-list.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { filter, map } from 'rxjs';\nimport { ConnectionStatus } from 'src/app/enums/connection-status';\nimport { Connection } from 'src/app/models/connection';\nimport { AgentService } from 'src/app/services/agent.service';\n\n@Component({\n  selector: 'app-connection-list',\n  templateUrl: './connection-list.component.html',\n  styleUrls: ['./connection-list.component.scss']\n})\nexport class ConnectionListComponent {\n  connections: any[] = [];\n\n  constructor(private agentService: AgentService) { }\n\n  ngOnInit() {\n    this.agentService.getConnections().pipe(\n      map((connections: Connection[]) => {connections.filter((connection: Connection) => connection.state === ConnectionStatus.ACTIVE || connection.state === ConnectionStatus.REQUESTED)\n      })\n    ).subscribe()\n  }\n\n  onRemoveConnection(connection: any) {\n    this.agentService.removeConnection(connection.connection_id)\n      .pipe(\n        filter((connectionId: string) => !!connectionId),\n        map((connectionId: string) =>\n          this.connections = this.connections.filter((conn: any) => conn.connection_id !== connectionId))\n      )\n      .subscribe();\n  }\n}\n","<div class=\"card-columns\">\n    <app-connection-card *ngFor=\"let connection of connections\" [connection]=\"connection\"\n        (remove)=\"onRemoveConnection($event)\"></app-connection-card>\n</div>\n\n<app-empty-list *ngIf=\"!connections?.length\"></app-empty-list>"],"mappings":"AAEA,SAASA,MAAM,EAAEC,GAAG,QAAQ,MAAM;AAClC,SAASC,gBAAgB,QAAQ,iCAAiC;;;;;;;;;ICF9DC,EAAA,CAAAC,cAAA,6BAC0C;IAAtCD,EAAA,CAAAE,UAAA,oBAAAC,6FAAAC,MAAA;MAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,MAAA,GAAAP,EAAA,CAAAQ,aAAA;MAAA,OAAUR,EAAA,CAAAS,WAAA,CAAAF,MAAA,CAAAG,kBAAA,CAAAN,MAAA,CAA0B;IAAA,EAAC;IAACJ,EAAA,CAAAW,YAAA,EAAsB;;;;IADJX,EAAA,CAAAY,UAAA,eAAAC,aAAA,CAAyB;;;;;IAIzFb,EAAA,CAAAc,SAAA,qBAA8D;;;ADO9D,OAAM,MAAOC,uBAAuB;EAGlCC,YAAoBC,YAA0B;IAA1B,KAAAA,YAAY,GAAZA,YAAY;IAFhC,KAAAC,WAAW,GAAU,EAAE;EAE2B;EAElDC,QAAQA,CAAA;IACN,IAAI,CAACF,YAAY,CAACG,cAAc,EAAE,CAACC,IAAI,CACrCvB,GAAG,CAAEoB,WAAyB,IAAI;MAAEA,WAAW,CAACrB,MAAM,CAAEyB,UAAsB,IAAKA,UAAU,CAACC,KAAK,KAAKxB,gBAAgB,CAACyB,MAAM,IAAIF,UAAU,CAACC,KAAK,KAAKxB,gBAAgB,CAAC0B,SAAS,CAAC;IACnL,CAAC,CAAC,CACH,CAACC,SAAS,EAAE;EACf;EAEAhB,kBAAkBA,CAACY,UAAe;IAChC,IAAI,CAACL,YAAY,CAACU,gBAAgB,CAACL,UAAU,CAACM,aAAa,CAAC,CACzDP,IAAI,CACHxB,MAAM,CAAEgC,YAAoB,IAAK,CAAC,CAACA,YAAY,CAAC,EAChD/B,GAAG,CAAE+B,YAAoB,IACvB,IAAI,CAACX,WAAW,GAAG,IAAI,CAACA,WAAW,CAACrB,MAAM,CAAEiC,IAAS,IAAKA,IAAI,CAACF,aAAa,KAAKC,YAAY,CAAC,CAAC,CAClG,CACAH,SAAS,EAAE;EAChB;EAAC,QAAAK,CAAA,G;qBApBUhB,uBAAuB,EAAAf,EAAA,CAAAgC,iBAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAvBpB,uBAAuB;IAAAqB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCZpC1C,EAAA,CAAAC,cAAA,aAA0B;QACtBD,EAAA,CAAA4C,UAAA,IAAAC,sDAAA,iCACgE;QACpE7C,EAAA,CAAAW,YAAA,EAAM;QAENX,EAAA,CAAA4C,UAAA,IAAAE,iDAAA,4BAA8D;;;QAJd9C,EAAA,CAAA+C,SAAA,GAAc;QAAd/C,EAAA,CAAAY,UAAA,YAAA+B,GAAA,CAAAzB,WAAA,CAAc;QAI7ClB,EAAA,CAAA+C,SAAA,GAA0B;QAA1B/C,EAAA,CAAAY,UAAA,WAAA+B,GAAA,CAAAzB,WAAA,kBAAAyB,GAAA,CAAAzB,WAAA,CAAA8B,MAAA,EAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}