{"ast":null,"code":"import { AgentStatus } from '../enums/agent-status';\nimport { of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AgentService {\n  constructor(http) {\n    this.http = http;\n  }\n  getStatus() {\n    return this.http.get('/status').pipe(switchMap(() => of(AgentStatus.Up)), catchError(this.handleError('getStatus', AgentStatus.Down)));\n  }\n  getConnections() {\n    return this.http.get('/connections').pipe(switchMap(response => of(response.results)), catchError(this.handleError('getConnections', [])));\n  }\n  removeConnection(connectionId) {\n    if (!connectionId) {\n      console.error('Must provide a connection ID');\n      return throwError(() => new Error('Must provide a connection ID'));\n    }\n    return this.http.post(`/connections/${connectionId}/remove`, {}).pipe(switchMap(() => of(connectionId)), catchError(this.handleError('removeConnection', null)));\n  }\n  createInvitation(alias) {\n    const params = new URLSearchParams();\n    params.set(\"alias\", alias);\n    return this.http.post('/connections/create-invitation?' + params, {}).pipe(switchMap(response => of(response)), catchError(this.handleError('createInvitation', null)));\n  }\n  receiveInvitation(invitation) {\n    return this.http.post('/connections/receive-invitation', invitation).pipe(switchMap(response => of(response)), catchError(this.handleError('receiveInvitation', null)));\n  }\n  getCredentials() {\n    return this.http.get('/credentials').pipe(switchMap(response => of(response.results)), catchError(this.handleError('getCredentials', [])));\n  }\n  getProofs() {\n    return this.http.get('/present-proof/records').pipe(switchMap(response => of(response.results)), catchError(this.handleError('getProofs', [])));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.error(`${operation} failed: ${error.message}`);\n      // Prevent application from completely erroring out.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function AgentService_Factory(t) {\n    return new (t || AgentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AgentService,\n    factory: AgentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AgentStatus","of","throwError","catchError","switchMap","AgentService","constructor","http","getStatus","get","pipe","Up","handleError","Down","getConnections","response","results","removeConnection","connectionId","console","error","Error","post","createInvitation","alias","params","URLSearchParams","set","receiveInvitation","invitation","getCredentials","getProofs","operation","result","message","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/andy/University/masters-thesis/ddos-data-mesh-network/controllers/acme-controller/src/app/services/agent.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\n\nimport { AgentStatus } from '../enums/agent-status'\n\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AgentService {\n\n  constructor(private http: HttpClient) { }\n\n  getStatus(): Observable<AgentStatus> {\n    return this.http.get<any>('/status')\n      .pipe(\n        switchMap(() => of(AgentStatus.Up)),\n        catchError(this.handleError<any>('getStatus', AgentStatus.Down))\n      );\n  }\n\n  getConnections(): Observable<any[]> {\n    return this.http.get<any[]>('/connections')\n      .pipe(\n        switchMap((response: any) => of(response.results)),\n        catchError(this.handleError<any[]>('getConnections', []))\n      );\n  }\n\n  removeConnection(connectionId: string): Observable<any> {\n    if (!connectionId) {\n      console.error('Must provide a connection ID');\n      return throwError(() => new Error('Must provide a connection ID'));\n    }\n    return this.http.post<any>(`/connections/${connectionId}/remove`, {})\n      .pipe(\n        switchMap(() => of(connectionId)),\n        catchError(this.handleError<any>('removeConnection', null))\n      );\n  }\n\n  createInvitation(alias: string): Observable<any> {\n\n    const params: URLSearchParams = new URLSearchParams();\n    params.set(\"alias\", alias)\n\n    return this.http.post<any>('/connections/create-invitation?' + params, {})\n      .pipe(\n        switchMap((response: any) => of(response)),\n        catchError(this.handleError<any>('createInvitation', null))\n      );\n  }\n\n  receiveInvitation(invitation: any): Observable<any> {\n    return this.http.post<any>('/connections/receive-invitation', invitation)\n      .pipe(\n        switchMap((response: any) => of(response)),\n        catchError(this.handleError<any>('receiveInvitation', null))\n      );\n  }\n\n  getCredentials(): Observable<any[]> {\n    return this.http.get<any[]>('/credentials')\n      .pipe(\n        switchMap((response: any) => of(response.results)),\n        catchError(this.handleError<any[]>('getCredentials', []))\n      );\n  }\n\n  getProofs(): Observable<any[]> {\n    return this.http.get<any[]>('/present-proof/records')\n      .pipe(\n        switchMap((response: any) => of(response.results)),\n        catchError(this.handleError<any[]>('getProofs', []))\n      );\n  }\n\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n      console.error(`${operation} failed: ${error.message}`);\n      // Prevent application from completely erroring out.\n      return of(result as T);\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}