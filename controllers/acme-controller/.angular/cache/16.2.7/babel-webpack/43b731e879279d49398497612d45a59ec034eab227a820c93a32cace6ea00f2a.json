{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InterceptorService {\n  constructor() {\n    // TODO fix $ENV name not found\n    // this.hostname = $ENV.DAO_AGENT_HOST || 'localhost';\n    // this.port = $ENV.RUNMODE === 'pwd' ? '' : ':8031';\n    this.hostname = 'localhost';\n    this.port = ':8041';\n    this.formattedAgentUrl = `http://${this.hostname}` + this.port;\n    console.log('Agent is running on: ' + this.formattedAgentUrl);\n  }\n  intercept(req, next) {\n    req = req.clone({\n      url: this.formattedAgentUrl + req.url\n    });\n    return next.handle(req);\n  }\n  static #_ = this.ɵfac = function InterceptorService_Factory(t) {\n    return new (t || InterceptorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InterceptorService,\n    factory: InterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["InterceptorService","constructor","hostname","port","formattedAgentUrl","console","log","intercept","req","next","clone","url","handle","_","_2","factory","ɵfac","providedIn"],"sources":["/home/andy/University/masters-thesis/ddos-data-mesh-network/controllers/acme-controller/src/app/services/interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterceptorService implements HttpInterceptor {\n  hostname: string;\n  port: string;\n  formattedAgentUrl: string;\n\n  constructor() {\n    // TODO fix $ENV name not found\n    // this.hostname = $ENV.DAO_AGENT_HOST || 'localhost';\n    // this.port = $ENV.RUNMODE === 'pwd' ? '' : ':8031';\n\n    this.hostname = 'localhost';\n    this.port = ':8041';\n    this.formattedAgentUrl = `http://${this.hostname}` + this.port;\n    console.log('Agent is running on: ' + this.formattedAgentUrl);\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler):\n    Observable<HttpEvent<any>> {\n    req = req.clone({\n      url: this.formattedAgentUrl + req.url\n    });\n    return next.handle(req);\n  }\n}"],"mappings":";AAQA,OAAM,MAAOA,kBAAkB;EAK7BC,YAAA;IACE;IACA;IACA;IAEA,IAAI,CAACC,QAAQ,GAAG,WAAW;IAC3B,IAAI,CAACC,IAAI,GAAG,OAAO;IACnB,IAAI,CAACC,iBAAiB,GAAG,UAAU,IAAI,CAACF,QAAQ,EAAE,GAAG,IAAI,CAACC,IAAI;IAC9DE,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAAG,IAAI,CAACF,iBAAiB,CAAC;EAC/D;EAEAG,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAEhDD,GAAG,GAAGA,GAAG,CAACE,KAAK,CAAC;MACdC,GAAG,EAAE,IAAI,CAACP,iBAAiB,GAAGI,GAAG,CAACG;KACnC,CAAC;IACF,OAAOF,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC;EACzB;EAAC,QAAAK,CAAA,G;qBAtBUb,kBAAkB;EAAA;EAAA,QAAAc,EAAA,G;WAAlBd,kBAAkB;IAAAe,OAAA,EAAlBf,kBAAkB,CAAAgB,IAAA;IAAAC,UAAA,EAFjB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}